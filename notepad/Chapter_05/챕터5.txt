1. size of 연산자의 피연산자는 자료형

2. 관계연산자 논리연산자는 모두 참 거짓을 반환

3. 삼항연산자는 피연산자를 판단하는 부분을 알면 유의점을 알수 있다.
c언어에서 ?로 시작하는 연산자는 삼항연산자가 유일하다. 컴파일러는 ?를 발견하면 바로 앞이 조건식인지 판단 이후 
':'이 나오기 전까지 ?와 : 사이에 있는 모든 녀석을 하나의 항으로 판단함. 
그런데 : 이후에 나오는건 띄어쓰기 혹은 예약어 혹은 연산자 등등 으로 끝을 판단함.

예를들어
nInput <= 10 ? nSelect = 10 : nSelect = 20;
(nInput <= 10) ? (nSelect = 10) : (nSelect) = 20; 이렇게 판단해버림.. 이렇게 되면 문제인게 삼항 연산자도
결국 연산자다. 즉 이 말은 연산의 결과물은 임시결과일뿐이지, 변수가 아니란소리. 
임시결과 = 20; 이 되어버린 상황이 된다. 따라서 l-Value 에러를 내뱉는거다.

해결방법은 세번째 항인 : 이후에 나오는 애들은 괄호로 잘 묶어서 처리해주면 된다.


-문제 분류와 선택-
#include <stdio.h>

int main()
{
    printf("키를 입력하세요 : ");
    int nInput;
    scanf("%d", &nInput);
    printf("\n결과 : %s\n", nInput >= 150 ? "합격" : "불합격");
    return 0;
}

-최댓값 구하기 토너먼트 방식-
#include <stdio.h>

int main()
{
    printf("숫자 4개 : ");
    int nMax = 0;
    int a[4] = {0};
    for(int i=0; i<4; i++){
        scanf("%d%*c", &a[i]);
    }
    for(int i = 0; i<4; i+=2){
        int temp = (a[i]>a[i+1] ? a[i] : a[i+1]);
        nMax < temp ? nMax=temp : nMax;
    }
    nMax < a[4] ? nMax=a[4] : nMax;
    
    printf("\nMax : %d\n", nMax);
    return 0;
}

4. 토너먼트 서바이벌 
성능 : 서바이벌 유리 
유지보수 : 서바이벌 유리
확장성 : 서바이벌 유리
메모리 : 서바이벌 유리 

아 그런데 이건 입력을 하나씩 받는다는 조건하에 이런거고, 이미 있는 배열을 가지고 최댓값을 찾는거는 다른 효율성이 나올거 같다.
근데 그래도 16 vs 8+4+2+1 = 15  32 vs 15+16 = 21 보니까 최댓값만 찾는거 정도는 효율 차이가 없다.
유지보수 확장성은 서바이벌이 유리할거 같고, 메모리는 nmax를 계속 초기화하니까 토너먼트가 유리
