1. 함수 설계 원칙 2가지
사용자 인터페이스와 내부의 기능은 반드시 분리할 것
하나의 단위 기능으로 규정할 수 있는 것은 함수화 할것.
-> 사용자 인터페이스 ui 가 처리해야될 기능까지 함수 로직에서 다 처리하지 말라는 말이다.
입력을 해주세요. 같은거와 계산을 하는건 분리 해야될 일.

2 . DRY원칙 ( Dont Repeat Yourself )

3. 코드분할할 때 주의할점
- 함수의 이름에서 기능이 무엇인지 직관적으로 알 수 있어야함.
- 전달되어야 할 매개변수를 확정하고
- 함수 호출시에 반환값을 어떻게 처리할지 확정해야함.

10-01 분할 예제
#include <stdio.h>

int GetData(){
    int temp;
    puts("숫자 입력하세요.");
    scanf("%d", &temp);
    return temp;
}

int GetMax(int a, int b, int c){
    int max = a;
    if(max < b) max = b;
    if(max < c) max = c;
    return max;
}

void PrintData(int a, int b, int c, int max){
    printf("%d, %d, %d 중에서 최댓값은 %d", a, b, c, max);
    return;
}

int main()
{
    int aList[3] = {0};
    int nMax = -9999, i = 0;
    
    //입력
    for(i =0; i<3; i++)
        aList[i] = GetData();
        
    //최댓값 계산
    nMax = GetMax(aList[0], aList[1], aList[2]);
    
    //출력
    PrintData(aList[0], aList[1], aList[2], nMax);

    return 0;
}

4. 함수의 원형 선언
컴파일러는 main까지 순차적으로 소스파일을 읽기 때문에 main 함수 위에 피호출자 함수가 선언되어 있지 않으면 "정의 에러"를 때림
만약 컴파일러의 규칙때문에 선언은 위에다가 했는데, 정의를 깜빡하고 밑에 하지 못하면 "링크 에러"가 발생.
"링크 에러"는 에러문을 읽어서 해결 될 수 있는게 아니다. 그냥 실체 정의가 없기에 발생하는 에러이다. 혹은 중복이라서 뭘
타겟으로 할지 모르는 경우이다.

5. 전역변수는 아주 편리하지만 독립성을 해치는 구조로 코드를 나쁘게 만드는 원흉이 되기도 한다.
정말 필요한 체크값 정도로만 가지고 있어야 하며, 이걸 많이 쓰는 함수를 만들면 만들 수록 혹은 데이터를 수시로 읽기쓰고하면
더더욱 코드는 병신 코드가 된다.