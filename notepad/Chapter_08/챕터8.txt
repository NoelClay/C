1. 연산자의 결과는 r-value 즉 데이터 이다.
그런데 배열 연산자의 결과는 l-value이다. 즉 변수처럼 읽기 쓰기가 되는 형태라는 것.
list[1] 은 배열연산자에 의해 인덱스 1번의 값이 되는데 리터럴이 아니라 변수처럼 대입도 가능하다는 것.

2. 배열을 선언하게 되면 배열의 이름에 저장된건 포인터 주소라고 배움.
그러면 배열 이름 자체가 반환하는 건 주소상수 이다. 즉 배열 이름  =  주소 포인터 이런식으로 할당 자체가 안된다.
배열에 주소 상수를 대입하는건 처음 선언과 초기화 단계에서만 가능하다.

08-01
배열에서 최댓값 구하기 수정하기

#include <stdio.h>

int main()
{
    int alist[] = {10, 20, 30, 40, 50};
    //변수나 배열 추가 선언 없이 최댓값만 출력하면 끝
    
    for(int i = 0; i < 5 ; i++){
        alist[0]<alist[i] ? alist[0] = alist[i] : alist[0];
    }
    
    printf("Max : %d", alist[0] );

    return 0;
}

08-02
요소의 값을 교환하는 방식으로 배열에서 최솟값 구하기

#include <stdio.h>
int main()
{
    //메모리 추가 선언 없이, 최솟값을 반환하되 데이터 교환을 해야함.
    int alist[] = {30, 40, 10, 50, 20};
    int i = 0, nTemp = 0;
    
    for(i = 0; i < 5 ; i++){
        if(alist[0] > alist[i]){
            nTemp = alist[0];
            alist[0] = alist[i];
            alist[i] = nTemp;
        }
    }
    
    for(i = 0; i<5; i++)
        printf("%d\t", alist[i] );
    puts("");
	
    printf("\nMin : %d", alist[0] );
	return 0;
}

3. 문자열의 끝은 항상 \0 이다 null을 의미합니다.

4. 다차원 배열의 경우 배열의 이름은 결국 주소상수이다. 2차원이라고 했을때 list[n]은 변수가 아니라 주소상수이다.
저걸 써서 대입할려고 하면 에러 발생한다. 진짜 변수에 접근하고자 한다면, list[n][m] 꼴로 만들어야한다. 
list <-2차원 배열 주소상수 list[n] <- 1차원 배열의 주소상수 list[n][m] <- 내부 인스턴스 변수

08-03
2차원 배열의 행과 열의 총합 계산하기

#include <stdio.h>

int main()
{
    //다음에 주어진 변수들과 구조를 토대로 구현만으로 작동하게하라
    int alist[3][4] = {{10, 20, 30}, {40, 50, 60}};
    int i = 0, j = 0;
    
    //구현부 입니다.
    for(i = 0; i < 2 ; i++){
        alist[i][3] = 0;
        for(j=0; j<3; j++){
            alist[i][3] += alist[i][j];   
        }
    }
    
    for(j=0; j<4 ; j++){
        alist[2][j] = 0;
        for(i=0; i<2; i++){
            alist[2][j] += alist[i][j];
        }
    }
    
    //출력부입니다. 이하 건드리지 마시오.
    for(i = 0; i < 3 ; i++){
        for(j=0; j<4; j++){
            printf("%d\t", alist[i][j]);
        }
        putchar('\n');
    }
    return 0;
}
