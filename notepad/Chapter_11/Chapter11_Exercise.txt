1)
ndata는 변수명 , &ndata는 변수명에 &주소 연산자를 취한 꼴
ndata의 r-value 결과값 : ndata 변수의 주소로 들어가서 저장되어 있는 데이터를 선언한 자료형에 맞게 해석
&ndata의 r-value 결과값 : ndata 변수가 선언될때 메모리에 할당한 주소값을 반환함

2)
매개변수로 char*형 자료를 받아서 문자열 길이 계산하는 함수
#include <stdio.h>

int GetLength(char *cString){
    int i=0;
    if(*cString == 0)
    return i;
    else{
        while(*(cString+i)!=0)
            i++;
    }
    return(i);
}

int main()
{
    printf("Hello World");
    
    puts("");
    
    printf("%d\n%d", GetLength("12341234"), GetLength(""));

    return 0;
}

3)
char szBuffer[12] = {"HelloWorld"}; 
허용되지 않은 문법. 그냥 문자열을 대입하면 char형 배열에 맞춰서 대입되는데, 굳이 알려주지도 않은 {} 안에 그냥 문자열을 넣는건 잘못된 방식
{}쓰면 내부 요소라고 판단해버리기 때문에, szBuffer[0] 에 "HelloWorld"를 갑자기 넣겠다고 하는 꼴

스코프 마지막에 free(pszData) 를 하지 않는 행위는 치며적인 오류


4)strrev는 char*형을 받아서 뒤집는 함수

#include <stdio.h>
#include <stdlib.h>

int GetLength(char *cString){
    int i=0;
    if(*cString == 0)
    return i;
    else{
        while(*(cString+i)!=0)
            i++;
    }
    return(i);
}
char* MyStrrevTempVal(char *cString){
    int len = GetLength(cString);
    if(len<=1){
        return cString;
    }
    else{
        char* tString = (char*)malloc(sizeof(char) * (len+1));
        for(int i = 0; i<len; i++){
            *(tString+i) = *(cString+(len-1-i));
        }
        *(tString+len) = 0; 
        return tString;
    }
}

int main()
{
    printf("Hello World");
    
    puts("");
    
    printf("%d\n%d\n", GetLength("12341234"), GetLength(""));
    printf("%s\n%s\n", MyStrrevTempVal("12341234"), MyStrrevTempVal("icanfly"));

    return 0;
}

5) 와따마 어렵다잉
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* ShowQueReturnStr(char* pCStr, int* nSize, int* lastIDX);
char* ReAllocSetnull(char* pCStr, int* nSize);
int EndTrriger = 1;

int main() {
    int countcall = 0;
    int nSize = 10;
    char* pCStr = (char*)calloc(nSize + 1, sizeof(char));
    int lastIDX = 0;
    while(EndTrriger){
        pCStr = ShowQueReturnStr(pCStr, &nSize, &lastIDX);
        countcall++;
        if(nSize >= 3000 || countcall>30){
            EndTrriger--;
        }
    }
    free(pCStr); // Free the allocated memory
    return 0;
}

char* ShowQueReturnStr(char* pCStr, int* nSize, int* lastIDX) {
    printf("문자열 입력하세요\n");
    int cnt = *lastIDX;
    char ctemp;

    while ((ctemp = getchar()) != '\n') {
        if (cnt >= *nSize) {
            pCStr = ReAllocSetnull(pCStr, nSize); // Update pCStr when reallocated
        }
        pCStr[cnt++] = ctemp; // Use array notation for clarity
    }

    pCStr[cnt] = '\0'; // Null-terminate the string
    *lastIDX = cnt;
    
    printf("새로 저장된 문자열은\n%s\n", pCStr);
    return pCStr;
}

char* ReAllocSetnull(char* pCStr, int* nSize) {
    *nSize += 10;
    pCStr = (char*)realloc(pCStr, sizeof(char) * (*nSize + 1));
    //memset(pCStr + *nSize, '\0', sizeof(char));
    return pCStr;
}


6)
#include <stdio.h>
#include <stdlib.h>

void UserInterface(int* nSizePointer, int* nSizeString);

int main() {
    int nSizePointer = 0;
    int nSizeString = 0;

    UserInterface(&nSizePointer, &nSizeString);

    // 배열 포인터를 사용하여 2차원 문자열 배열 할당
    char (*ppchar)[nSizeString] = malloc(nSizePointer * sizeof(*ppchar));

    for (int i = 0; i < nSizePointer; i++) {
        printf("%d행 문자열 입력하쇼: ", i + 1);
        scanf("%s", ppchar[i]);
    }

    for (int i = 0; i < nSizePointer; i++) {
        printf("%d행 문자열: %s\n", i + 1, ppchar[i]);
    }

    // 메모리 해제
    free(ppchar);

    return 0;
}

void UserInterface(int* nSizePointer, int* nSizeString) {
    printf("문장의 갯수를 입력하시오.\n");
    scanf("%d", nSizePointer);
    printf("문장의 최대 길이를 입력하시오.\n");
    scanf("%d", nSizeString);
}