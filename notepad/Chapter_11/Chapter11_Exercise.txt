1)
ndata는 변수명 , &ndata는 변수명에 &주소 연산자를 취한 꼴
ndata의 r-value 결과값 : ndata 변수의 주소로 들어가서 저장되어 있는 데이터를 선언한 자료형에 맞게 해석
&ndata의 r-value 결과값 : ndata 변수가 선언될때 메모리에 할당한 주소값을 반환함

2)
매개변수로 char*형 자료를 받아서 문자열 길이 계산하는 함수
#include <stdio.h>

int GetLength(char *cString){
    int i=0;
    if(*cString == 0)
    return i;
    else{
        while(*(cString+i)!=0)
            i++;
    }
    return(i);
}

int main()
{
    printf("Hello World");
    
    puts("");
    
    printf("%d\n%d", GetLength("12341234"), GetLength(""));

    return 0;
}

3)
char szBuffer[12] = {"HelloWorld"}; 
허용되지 않은 문법. 그냥 문자열을 대입하면 char형 배열에 맞춰서 대입되는데, 굳이 알려주지도 않은 {} 안에 그냥 문자열을 넣는건 잘못된 방식
{}쓰면 내부 요소라고 판단해버리기 때문에, szBuffer[0] 에 "HelloWorld"를 갑자기 넣겠다고 하는 꼴

스코프 마지막에 free(pszData) 를 하지 않는 행위는 치며적인 오류


4)strrev는 char*형을 받아서 뒤집는 함수

#include <stdio.h>
#include <stdlib.h>

int GetLength(char *cString){
    int i=0;
    if(*cString == 0)
    return i;
    else{
        while(*(cString+i)!=0)
            i++;
    }
    return(i);
}
char* MyStrrevTempVal(char *cString){
    int len = GetLength(cString);
    if(len<=1){
        return cString;
    }
    else{
        char* tString = (char*)malloc(sizeof(char) * (len+1));
        for(int i = 0; i<len; i++){
            *(tString+i) = *(cString+(len-1-i));
        }
        *(tString+len) = 0; 
        return tString;
    }
}

int main()
{
    printf("Hello World");
    
    puts("");
    
    printf("%d\n%d\n", GetLength("12341234"), GetLength(""));
    printf("%s\n%s\n", MyStrrevTempVal("12341234"), MyStrrevTempVal("icanfly"));

    return 0;
}



